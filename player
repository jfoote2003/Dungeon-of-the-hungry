class_name Player extends CharacterBody2D

signal direction_changed(new_direction : Vector2)
signal toggle_inventory()

var cardinal_direction : Vector2 = Vector2.DOWN
var direction : Vector2 = Vector2.ZERO
var DIRECTION_4 = [Vector2.RIGHT,Vector2.DOWN,Vector2.LEFT,Vector2.UP]
var can_move : bool = true

var player_effects : Effects

var weapon_selected : bool = false

@export var player_class : PlayerClass

var health : int = 100
var max_health : int = health

@onready var main = get_tree().get_root().get_node("Testing")

@onready var sprite : Sprite2D = $Sprite2D
@onready var state_machine : PlayerStateMachine = $StateMachine
@onready var animation_player : AnimationPlayer = $AnimationPlayer
@onready var audio_stream_player : AudioStreamPlayer2D = $AudioStreamPlayer2D
@onready var hurt_box = $interactions/HurtBox
@onready var health_bar = $CanvasLayer/HealthBar
@onready var projectile = load("res://Projectiles/projectile.tscn")
@onready var ray_cast_2d = $RayCast2D

@export var inventory_data : InventoryData
@export var helmet_inv_data : InventoryDataHelmet
@export var chest_inv_data : InventoryDataChest
@export var greeves_inv_data : InventoryDataGreeves
@export var boots_inv_data : InventoryDataBoots
@export var rings_inv_data : InventoryDataRings

var is_in_inv : bool = false


# Called when the node enters the scene tree for the first time.
func _ready():
	PlayerManager.player = self
	state_machine.Initalize(self)
	health_bar.init_health(health,max_health)
	ray_cast_2d.enabled = true
	
	#print(player_class.ClassName)
	#print(player_class.Strength)
	#print(max_health)
	pass # Replace with function body.

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(_delta):
	direction = Vector2(
		Input.get_axis("left","right"),
		Input.get_axis("up","down")
	).normalized()
	pass

func _unhandled_input(_event : InputEvent) -> void:
	if Input.is_action_just_pressed("inventory"):
		toggle_inventory.emit()
		is_in_inv = !is_in_inv
		
	if Input.is_action_just_pressed("activate_ability") and is_in_inv == false:
		
		pass
		
	if Input.is_action_just_pressed("interact") and ray_cast_2d.is_colliding():
		check_interaction()
		pass
	
	
	pass

func check_interaction():
	if ray_cast_2d.is_colliding():
		var collider = ray_cast_2d.get_collider()
		if collider.get_parent().has_method("interact_chest"):
			collider.get_parent().interact_chest()
		elif collider.get_parent().has_method("interact_cooking"):
			collider.get_parent().interact_cooking()

func _physics_process(_delta):
	move_and_slide()

func update_animation(state : String) -> void:
	animation_player.play(state + "_" + animate_direction())
	pass

func set_direction() -> bool:
	if direction == Vector2.ZERO:
		return false
	
	
	var direction_id : int = int( round( direction + cardinal_direction * .1 ).angle() / TAU * DIRECTION_4.size() )
	var new_direction = DIRECTION_4[direction_id]
	if new_direction == cardinal_direction:
		return false
	
	cardinal_direction = new_direction
	direction_changed.emit(new_direction)
	sprite.scale.x = 1 if cardinal_direction == Vector2.LEFT else -1
	update_raycast_direction()
	return true

func update_raycast_direction()  -> void:
	match cardinal_direction:
		Vector2.RIGHT:
			ray_cast_2d.target_position = Vector2(10, 0)
		Vector2.LEFT:
			ray_cast_2d.target_position = Vector2(-10, 0)
		Vector2.UP:
			ray_cast_2d.target_position = Vector2(0, -10)
		Vector2.DOWN:
			ray_cast_2d.target_position = Vector2(0, 10)

func animate_direction() -> String:
	if cardinal_direction == Vector2.DOWN:
		return "down"
	elif cardinal_direction == Vector2.UP:
		return "up"
	else:
		return "side"

func heal(heal_value : int) -> void:
	health += heal_value
	#print(health)
	if health > max_health:
		health = max_health

func cast(spell : Spell) -> void:
	if spell.num_projectiles > 0:
		var instance = projectile.instantiate()
		instance.item_data = spell
		instance.direction = cardinal_direction
		instance.spawnPOS = global_position + Vector2(0,-10)

		main.add_child.call_deferred(instance)
	pass

func fight(_weapon : ItemDataWeapons) -> void:
	weapon_selected = true
	pass
