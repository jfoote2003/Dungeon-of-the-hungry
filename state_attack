class_name State_Attack extends State

var attacking : bool = false

@export_range(1,20,0.5) var deceleration_speed : float = 5.0

@onready var animation_player = $"../../AnimationPlayer"
@onready var audio_stream_player = $"../../AudioStreamPlayer2D"
@onready var hurt_box = $"../../interactions/HurtBox"


@onready var idle : State = $"../idle"
@onready var walk : State = $"../walk"


func exit() -> void:
	animation_player.animation_finished.disconnect(_end_attack)
	attacking = false
	hurt_box.monitoring = false
	
	player.weapon_selected = false
	pass

func enter() -> void:
	player.update_animation("attack")
	animation_player.animation_finished.connect(_end_attack)
	audio_stream_player.pitch_scale = randf_range(.9,1.1)
	
	attacking = true
	
	await get_tree().create_timer(.1).timeout
	hurt_box.monitoring = true
	
	await get_tree().create_timer(.5).timeout
	
	#attacking = false
	if attacking:
		return
	pass

func process(_delta : float) -> State:
	player.velocity -= player.velocity * deceleration_speed * _delta
	
	if attacking == false:
		if player.direction == Vector2.ZERO:
			return idle
		else:
			return walk
	return null

func physics(_delta : float) -> State:
	
	return null

func handle_input(_event : InputEvent) -> State:
	
	return null

func _end_attack(_newAnimName : String) -> void:
	#if Input.is_action_just_pressed("attack"):
		#state_machine.change_state()
	attacking = false


