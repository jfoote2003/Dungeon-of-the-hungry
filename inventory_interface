extends Control

signal force_close
#signal cooking_button_pressed

@onready var grabbed_slot = $GrabbedSlot
@onready var external_inventory = $ExternalInventory
@onready var player_inventory = $playerUI/PlayerInventory
@onready var rings_inventory = $playerUI/HBoxContainer/VBoxContainer2/RingsInventory
@onready var helmet_inventory = $playerUI/HBoxContainer/VBoxContainer/HelmetInventory
@onready var chest_inventory = $playerUI/HBoxContainer/VBoxContainer/ChestInventory
@onready var greeves_inventory = $playerUI/HBoxContainer/VBoxContainer/GreevesInventory
@onready var boots_inventory = $playerUI/HBoxContainer/VBoxContainer/BootsInventory

@onready var cooking_inventory_panel = $cookingUI
@onready var cooking_input_inventory = $cookingUI/CookingInventory
@onready var cooking_output_inventory = $cookingUI/CookingInventoryOutput
@onready var cooking_button = $cookingUI/Button


var grabbed_slot_data : SlotData
var external_inventory_owner
var cooking_inventory_owner

func _physics_process(_delta) -> void:
	if grabbed_slot.visible:
		grabbed_slot.global_position = get_global_mouse_position() + Vector2(5,5)
	
	if external_inventory_owner \
			and external_inventory_owner.global_position.distance_to(PlayerManager.get_global_position()) > 50:
		force_close.emit()
	
	if cooking_inventory_owner \
			and cooking_inventory_owner.global_position.distance_to(PlayerManager.get_global_position()) > 50:
		force_close.emit()

func set_player_inventory_data(inventory_data : InventoryData) -> void:
	inventory_data.inventory_interact.connect(on_inventory_interact)
	player_inventory.set_inventory_data(inventory_data)

func set_consumable_inventory_data(inventory_data : InventoryData) -> void:
	inventory_data.inventory_interact.connect(on_inventory_interact)
	cooking_input_inventory.set_inventory_data(inventory_data)

func set_helmet_inventory_data(inventory_data : InventoryData) -> void:
	inventory_data.inventory_interact.connect(on_inventory_interact)
	helmet_inventory.set_inventory_data(inventory_data)

func set_chest_inventory_data(inventory_data : InventoryData) -> void:
	inventory_data.inventory_interact.connect(on_inventory_interact)
	chest_inventory.set_inventory_data(inventory_data)

func set_greeves_inventory_data(inventory_data : InventoryData) -> void:
	inventory_data.inventory_interact.connect(on_inventory_interact)
	greeves_inventory.set_inventory_data(inventory_data)

func set_boots_inventory_data(inventory_data : InventoryData) -> void:
	inventory_data.inventory_interact.connect(on_inventory_interact)
	boots_inventory.set_inventory_data(inventory_data)

func set_rings_inventory_data(inventory_data : InventoryData) -> void:
	inventory_data.inventory_interact.connect(on_inventory_interact)
	rings_inventory.set_inventory_data(inventory_data)

func on_inventory_interact(inventory_data : InventoryData, index : int, button : int) -> void:
	match [grabbed_slot_data,button]:
		[null,MOUSE_BUTTON_LEFT]:
			grabbed_slot_data = inventory_data.grab_slot_data(index)
		[_,MOUSE_BUTTON_LEFT]:
			grabbed_slot_data = inventory_data.drop_slot_data(grabbed_slot_data, index)
		[null,MOUSE_BUTTON_RIGHT]:
			inventory_data.use_slot_data(index)
		[_,MOUSE_BUTTON_RIGHT]:
			grabbed_slot_data = inventory_data.drop_single_slot_data(grabbed_slot_data, index)
	update_grabbed_slot()

func update_grabbed_slot() -> void:
	if grabbed_slot_data:
		grabbed_slot.show()
		grabbed_slot.slot_background.visible = false
		grabbed_slot.set_slot_data(grabbed_slot_data)
	else:
		grabbed_slot.hide()
		grabbed_slot.slot_background.visible = true

func set_external_inventory(_external_inventory_owner) -> void:
	external_inventory_owner = _external_inventory_owner
	var inventory_data = external_inventory_owner.inventory_data
	
	inventory_data.inventory_interact.connect(on_inventory_interact)
	external_inventory.set_inventory_data(inventory_data)
	
	external_inventory.show()

func clear_external_inventory() -> void:
	if external_inventory_owner:
		var inventory_data = external_inventory_owner.inventory_data
		
		inventory_data.inventory_interact.disconnect(on_inventory_interact)
		external_inventory.clear_inventory_data(inventory_data)
		
		external_inventory.hide()
		external_inventory_owner = null

func set_cooking_inventory(_cooking_inventory_owner) -> void:
	cooking_inventory_owner = _cooking_inventory_owner
	var inventory_data_input = cooking_inventory_owner.inventory_input
	var inventory_data_output = cooking_inventory_owner.inventory_output
	
	inventory_data_input.inventory_interact.connect(on_inventory_interact)
	cooking_input_inventory.set_inventory_data(inventory_data_input)
	
	inventory_data_output.inventory_interact.connect(on_inventory_interact)
	cooking_output_inventory.set_inventory_data(inventory_data_output)
	
	cooking_inventory_panel.show()

func clear_cooking_inventory() -> void:
	if cooking_inventory_owner:
		var inventory_data_input = cooking_inventory_owner.inventory_input
		var inventory_data_output = cooking_inventory_owner.inventory_output
		
		inventory_data_input.inventory_interact.disconnect(on_inventory_interact)
		cooking_input_inventory.clear_inventory_data(inventory_data_input)
		
		inventory_data_output.inventory_interact.disconnect(on_inventory_interact)
		cooking_output_inventory.clear_inventory_data(inventory_data_output)
		
		cooking_inventory_panel.hide()
		cooking_inventory_owner = null


